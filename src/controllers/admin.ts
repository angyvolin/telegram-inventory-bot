import * as api from 'telegraf';

const Markup = require('telegraf/markup');

export default class AdminMessage {
	public static keyboard1 = Markup.keyboard([
		['–†–∞—Å—Å—ã–ª–∫–∞ üì°', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä'],
		['–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å ü§µ', '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ üëî'],
		['–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ üìÉ', '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é ‚ûï'],
		['–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 ‚è©']
	])
		.oneTime()
		.resize()
		.extra();

	public static keyboard2 = Markup.keyboard([
		['–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —è—á–µ–π–∫–∏', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏'],
		['–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –ø–æ–∑–∏—Ü–∏–∏', '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–¥–∞—á—É –ø–æ–∑–∏—Ü–∏–π —Ä–∞–±–æ—Ç–Ω–∏–∫—É'],
		['–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—É–ø–∫—É', '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ª–∂–Ω–∏–∫–æ–≤'],
		['‚è™ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1', '–°—Ç—Ä–∞–Ω–∏—Ü–∞ 3 ‚è©']
	])
		.oneTime()
		.resize()
		.extra();

	public static keyboard3 = Markup.keyboard([
		['–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ', '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤'],
		['–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã / —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤', '–°–ø–∏—Å–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'],
		['‚è™ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2']
	])
		.oneTime()
		.resize()
		.extra();

	public static async send(ctx: api.ContextMessageUpdate,
							 message: string = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
							 page: number = 1): Promise<void> {
		switch (page) {
			case 1: {
				await ctx.reply(message, this.keyboard1);
				break;
			}
			case 2: {
				await ctx.reply(message, this.keyboard2);
				break;
			}
			case 3: {
				await ctx.reply(message, this.keyboard3);
				break;
			}
		}
	}
}
