import ItemType from '../enums/ItemType';
import { getItem } from './items';
import { getCell } from './cells';

/**
 * @desc –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∑–∏—Ü–∏–π
 * –∏ –∏—Ö–Ω–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –Ω–∞ —Å–∫–ª–∞–¥–µ (–Ω–æ–º–µ—Ä–∞–º–∏ —è—á–µ–µ–∫)
 */
export async function getCellsMessage(items: { name: string; cellName: string }[]) {
	let message = '';
	for (const item of items) {
		if (!item.cellName) {
			message += `üî∏ ${item.name} -> –≤–Ω–µ —è—á–µ–π–∫–∏\n`;
		} else {
			message += `üî∏ ${item.name} -> ${item.cellName}\n`;
		}
	}
	return message;
}

/**
 * @desc –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∑–∏—Ü–∏–π
 * –∏ –∏—Ö–Ω–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤ –Ω–∞–ª–∏—á–∏–∏
 */
export async function getItemsMessage(
	items: { type: ItemType; id: string; amount: number }[],
	absent?: { name: string; amount: string; measure: string }[]
): Promise<string> {
	let message = '';
	for (let item of items) {
		const { id, type, amount } = item;
		const { name, measure } = await getItem(type, id);

		message += `üîπ ${name} -> ${amount} ${measure}\n`;
	}
	if (!absent) {
		return message;
	}
	for (let item of absent) {
		const { name, amount, measure } = item; // –ü–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
		message += `üîπ ${name} -> ${amount} ${measure}\n`;
	}

	return message;
}

export async function getItemsCellsMessage(items: { type: ItemType; id: string; amount: number }[]): Promise<string> {
	let message = '';
	for (let item of items) {
		const { id, type, amount } = item; // –ë–µ—Ä–µ–º –ø–æ–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
		const { name, measure } = await getItem(type, id); // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ë–î
		const cell = await getCell(type, id); // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏
		// –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ (–Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏)
		const cellName = cell ? '—è—á–µ–π–∫–∞ ' + cell.row + cell.col : '–≤–Ω–µ —è—á–µ–π–∫–∏';
		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
		message += `üîπ ${name} -> ${amount} ${measure} (${cellName})\n`;
	}
	return message;
}

export async function getItemsPriceMessage(
	items: { type: ItemType; id: string; amount: number; price: string }[],
	absent?: { name: string; amount: string; measure: string; price: string }[]
): Promise<string> {
	let message = '';
	for (let item of items) {
		const { id, type, amount, price } = item; // –ë–µ—Ä–µ–º –ø–æ–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
		const { name, measure } = await getItem(type, id); // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ë–î
		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
		message += `üîπ ${name} -> ${amount} ${measure} (${price}/${measure})\n`;
	}
	if (!absent) {
		return message;
	}
	for (let item of absent) {
		const { name, amount, measure, price } = item; // –ü–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
		message += `üîπ ${name} -> ${amount} ${measure} (${price}/${measure})\n`;
	}

	return message;
}

/**
 * @desc –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞–¥–æ–≤—â–∏–∫—É –¥–ª—è
 * –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º
 */
export async function getGettingMessage(
	username: string,
	items: { type: ItemType; id: string; amount: number }[],
	days?: number
): Promise<string> {
	let message = `*–†–∞–±–æ—Ç–Ω–∏–∫* @${username} —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n`;
	message += await getItemsCellsMessage(items);
	if (days) {
		// –ï—Å—Ç—å —Å—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è
		message += `*–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:* ${days} –¥–Ω–µ–π\n`; // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
	}
	return message;
}

/**
 * @desc –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞–¥–æ–≤—â–∏–∫—É –¥–ª—è
 * –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–∑–∏—Ü–∏–π —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º
 */
export async function getReturnMessage(
	username: string,
	items: { type: ItemType; id: string; amount: number }[]
): Promise<string> {
	let message = `*–†–∞–±–æ—Ç–Ω–∏–∫* @${username} –∂–µ–ª–∞–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥:\n`;
	message += await getItemsCellsMessage(items);
	return message;
}

/**
 * @desc –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –¥–ª—è
 * –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º
 */
export async function getRemoveMessage(
	username: string,
	items: { type: ItemType; id: string; amount: number }[],
	reason: string
): Promise<string> {
	let message = `*–†–∞–±–æ—Ç–Ω–∏–∫* @${username} –∂–µ–ª–∞–µ—Ç —Å–ø–∏—Å–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏:\n`;
	message += await getItemsMessage(items);
	message += `*–ü—Ä–∏—á–∏–Ω–∞:* ${reason}`;
	return message;
}

/**
 * @desc –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –¥–ª—è
 * –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–∫—É–ø–∫—É –ø–æ–∑–∏—Ü–∏–π —Å–Ω–∞–±–∂–µ–Ω—Ü–µ–º
 */
export async function getPurchaseMessage(
	username: string,
	items: { type: ItemType; id: string; amount: number; price: string }[],
	absent?: { name: string; amount: string; measure: string; price: string }[]
): Promise<string> {
	let message = `*–°–Ω–∞–±–∂–µ–Ω–µ—Ü* @${username} —Ö–æ—á–µ—Ç –∑–∞–∫—É–ø–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n`;
	message += await getItemsPriceMessage(items, absent);
	return message;
}

/**
 * @desc –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –¥–ª—è
 * –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–∫—É–ø–∫—É –ø–æ–∑–∏—Ü–∏–π –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º —Ü–µ—Ö–∞
 */
export async function getPurchaseChiefMessage(
	username: string,
	items: { type: ItemType; id: string; amount: number }[],
	absent?: { name: string; amount: string; measure: string }[]
): Promise<string> {
	let message = `*–ù–∞—á–∞–ª—å–Ω–∏–∫ —Ü–µ—Ö–∞* @${username} —Ö–æ—á–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –∑–∞–∫—É–ø–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π:\n`;
	message += await getItemsMessage(items, absent);
	message += `‚ùóÔ∏è–ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—É–ø–∫—É –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω —Å–Ω–∞–±–∂–µ–Ω—Ü–∞–º\n`;
	return message;
}

/**
 * @desc –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞–¥–æ–≤—â–∏–∫—É –¥–ª—è
 * –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –ø–æ–∑–∏—Ü–∏–π —Å–Ω–∞–±–∂–µ–Ω—Ü–µ–º
 */
export async function getSupplyMessage(
	username: string,
	items: { type: ItemType; id: string; amount: number }[]
): Promise<string> {
	let message = `*–°–Ω–∞–±–∂–µ–Ω–µ—Ü* @${username} —Ö–æ—á–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n`;
	message += await getItemsCellsMessage(items);
	return message;
}

export async function getChiefGettingMessage(chief: string, worker: string, days?: number): Promise<string> {
	let message = `*–ù–∞—á–∞–ª—å–Ω–∏–∫ —Ü–µ—Ö–∞* @${chief} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–¥–∞—á—É —Ä–∞–±–æ—Ç–Ω–∏–∫—É @${worker} —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞–±–ª–∏—Ü–µ.\n`;
	if (days) {
		message += `*–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:* ${days} –¥–Ω–µ–π\n`; // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
	}
	return message;
}

export async function getGettingWorkerMessage(
	items: { type: ItemType; id: string; amount: number }[],
	days?: number
): Promise<string> {
	let message = `–ù–∞ —Å–∫–ª–∞–¥–µ –≤–∞–º –¥–æ–ª–∂–Ω—ã –≤—ã–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n`;
	message += await getItemsCellsMessage(items);
	if (days) {
		// –ï—Å—Ç—å —Å—Ä–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è
		message += `*–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:* ${days} –¥–Ω–µ–π\n`; // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ–∫ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
	}
	message += '–ü—Ä–∏–π–¥–∏—Ç–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ!\n';
	return message;
}

export function getRequestSupplyMessage(
	itemsText: string,
): string {
	let message = `–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—É–ø–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π:\n`;
	message += itemsText;
	return message;
}