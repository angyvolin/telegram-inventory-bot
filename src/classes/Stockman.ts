import Person from './Person';
import ItemType from '../enums/ItemType';
import Confirmation from '../models/confirmation';
import Getting from '../models/getting';
import Instrument from '../models/instrument';
import Furniture from '../models/furniture';
import Consumable from '../models/consumable';
import { ItemCells } from './Person';
import { addItem, getItem, reduceItem } from '../helpers/items';
import { addToCell, getCell, reduceFromCell } from '../helpers/cells';

const Markup = require('telegraf/markup');

export default class Stockman extends Person {
	// Public
	public static async getCellsMessage(items: ItemCells[]) {
		let message = '';
		for (const item of items) {
			if (!item.cellName) {
				message += `üî∏ ${item.name} -> –≤–Ω–µ —è—á–µ–π–∫–∏\n`;
			} else {
				message += `üî∏ ${item.name} -> ${item.cellName}\n`;
			}
		}
		return message;
	}

	public static async confirmGiving(ctx: any): Promise<void> {
		const id = ctx.callbackQuery.data.split('>')[1];
		const confirmation = await Confirmation.findById(id);

		if (!confirmation) {
			return;
		}

		const messages = confirmation.messages;

		for (const message of messages) {
			const text = confirmation.text + '\n‚ùóÔ∏è–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞';
			await ctx.telegram.editMessageText(message.chatId, message.id, message.id, text);
		}

		const keyboard = Markup.inlineKeyboard([Markup.callbackButton('‚úÖ –ü–æ–ª—É—á–∏–ª', `confirmGetting>${id}`)]);
		const text = '‚úÖ –í–∞–º –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n' + confirmation.text + '\n‚ùóÔ∏è–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:';
		const options = {
			reply_markup: keyboard
		};

		await ctx.telegram.sendMessage(confirmation.chatId, text, options);
	}

	public static async confirmSupply(ctx: any): Promise<void> {
		const id = ctx.callbackQuery.data.split('>')[1];
		const confirmation = await Confirmation.findById(id);

		if (!confirmation) {
			return;
		}

		const messages = confirmation.messages;

		for (const message of messages) {
			const text = confirmation.text + '\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
			await ctx.telegram.editMessageText(message.chatId, message.id, message.id, text);
		}

		await confirmation.remove();

		const items: ItemCells[] = [];
		if (confirmation.instruments) {
			for (const [id, amount] of confirmation.instruments) {
				await addItem(ItemType.INSTRUMENT, id, amount);
				const cell = await getCell(ItemType.INSTRUMENT, id);
				const cellName = cell ? cell.row + cell.col : null;
				const { name } = await Instrument.findById(id);
				items.push({ cellName, name });
				if (cell) {
					await addToCell(cell._id, ItemType.INSTRUMENT, id, amount);
				}
			}
		}
		if (confirmation.furniture) {
			for (const [id, amount] of confirmation.furniture) {
				await addItem(ItemType.FURNITURE, id, amount);
				const cell = await getCell(ItemType.FURNITURE, id);
				const cellName = cell ? cell.row + cell.col : null;
				const { name } = await Furniture.findById(id);
				items.push({ cellName, name });
				if (cell) {
					await addToCell(cell._id, ItemType.FURNITURE, id, amount);
				}
			}
		}
		if (confirmation.consumables) {
			for (const [id, amount] of confirmation.consumables) {
				await addItem(ItemType.CONSUMABLE, id, amount);
				const cell = await getCell(ItemType.CONSUMABLE, id);
				const cellName = cell ? cell.row + cell.col : null;
				const { name } = await Consumable.findById(id);
				items.push({ cellName, name });
				if (cell) {
					await addToCell(cell._id, ItemType.CONSUMABLE, id, amount);
				}
			}
		}

		const text = '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:\n\n' + confirmation.text;
		await ctx.telegram.sendMessage(confirmation.chatId, text);

		/*
		 * –¢—É—Ç –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —è—á–µ–π–∫–∏
		 */

		const message = '–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º:\n' + (await Stockman.getCellsMessage(items));
		await ctx.reply(message);
	}

	/**
	 * Confirm return
	 */
	public static async confirmReturn(ctx: any): Promise<void> {
		const id = ctx.callbackQuery.data.split('>')[1];
		const gettingId = ctx.callbackQuery.data.split('>')[2];

		const confirmation = await Confirmation.findById(id);
		const getting = await Getting.findById(gettingId);

		if (!confirmation || !getting) {
			return;
		}

		const messages = confirmation.messages;

		for (const message of messages) {
			const text = ctx.update.callback_query.message.text + '\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
			await ctx.telegram.editMessageText(message.chatId, message.id, message.id, text);
		}

		const text = '‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã';
		await ctx.telegram.sendMessage(confirmation.chatId, text);

		getting.active = false;
		await getting.save();

		await confirmation.remove();

		const items: ItemCells[] = [];

		for (const [id, amount] of getting.instruments) {
			await addItem(ItemType.INSTRUMENT, id, amount);
			const cell = await getCell(ItemType.INSTRUMENT, id);
			const cellName = cell ? cell.row + cell.col : null;
			const { name } = await Instrument.findById(id);
			items.push({ cellName, name });
			if (cell) {
				await addToCell(cell._id, ItemType.INSTRUMENT, id, amount);
			}
		}

		const message = '–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º:\n' + (await Stockman.getCellsMessage(items));
		await ctx.reply(message);
	}

	/**
	 * Confirm removing
	 * @desc –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
	 * –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è Admin –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
	 */
	public static confirmRemovingInstrument(username: string, instruments: Map<number, number>): void {
		//...
	}

	/*
	 * Confirm receipt
	 */
	public static confirmReceipt(items: Map<number, number>): void {
		//...
	}
}
