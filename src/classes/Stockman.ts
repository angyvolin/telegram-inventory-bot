import Person from './Person';
import ItemType from '../enums/ItemType';
import Confirmation from '../models/confirmation';
import Instrument from '../models/instrument';
import Furniture from '../models/furniture';
import Consumable from '../models/consumable';
import { ItemCells } from './Person';
import { addItem } from '../helpers/items';
import { addToCell, getCell, getCellName } from '../helpers/cells';

const Markup = require('telegraf/markup');

export default class Stockman extends Person {
	// Private
	private static async getCellsMessage(items: ItemCells[]) {
		let message = '';
		for (const item of items) {
			if (!item.cellName) {
				message += `üî∏ ${item.name} -> –≤–Ω–µ —è—á–µ–π–∫–∏\n`;
			} else {
				message += `üî∏ ${item.name} -> ${item.cellName}\n`;
			}
		}
		return message;
	}

	// Public
	public static async confirmGetting(ctx: any): Promise<void> {
		const id = ctx.callbackQuery.data.split('>')[1];
		const confirmation = await Confirmation.findById(id);
		const messages = confirmation.messages;

		for (const message of messages) {
			const text = confirmation.text + '\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
			await ctx.telegram.editMessageText(message.chatId, message.id, message.id, text);
		}

		const items: ItemCells[] = [];
		if (confirmation.instruments) {
			for (const [id, amount] of confirmation.instruments) {
				const cell = await getCell(ItemType.INSTRUMENT, id);
				const cellName = cell ? cell.row + cell.col : null;
				const { name } = await Instrument.findById(id);
				items.push({ cellName, name });
			}
		}
		if (confirmation.furniture) {
			for (const [id, amount] of confirmation.furniture) {
				const cell = await getCell(ItemType.FURNITURE, id);
				const cellName = cell ? cell.row + cell.col : null;
				const { name } = await Furniture.findById(id);
				items.push({ cellName, name });
			}
		}
		if (confirmation.consumables) {
			for (const [id, amount] of confirmation.consumables) {
				const cell = await getCell(ItemType.CONSUMABLE, id);
				const cellName = cell ? cell.row + cell.col : null;
				const { name } = await Consumable.findById(id);
				items.push({ cellName, name });
			}
		}

		const keyboard = Markup.inlineKeyboard([[Markup.callbackButton('‚úÖ –ü–æ–ª—É—á–∏–ª', `confirmGetting>${id}`)], [Markup.callbackButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ', `declineGetting>${id}`)]]);
		const text = '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:\n\n' + confirmation.text + '\n‚ùóÔ∏è–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:';
		const options = {
			reply_markup: keyboard
		};

		await ctx.telegram.sendMessage(confirmation.chatId, text, options);

		/*
		 * –¢—É—Ç –Ω–∞–º –Ω—É–∂–Ω–æ –æ–ø—É—Å—Ç–æ—à–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —è—á–µ–π–∫–∏
		 */

		const message = '–í—ã–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º:\n' + (await Stockman.getCellsMessage(items));
		await ctx.reply(message);
	}

	public static async confirmSupply(ctx: any): Promise<void> {
		const id = ctx.callbackQuery.data.split('>')[1];
		const confirmation = await Confirmation.findById(id);
		const messages = confirmation.messages;

		for (const message of messages) {
			const text = confirmation.text + '\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
			await ctx.telegram.editMessageText(message.chatId, message.id, message.id, text);
		}

		confirmation.remove();

		const items: ItemCells[] = [];
		if (confirmation.instruments) {
			for (const [id, amount] of confirmation.instruments) {
				await addItem(ItemType.INSTRUMENT, id, amount);
				const cell = await getCell(ItemType.INSTRUMENT, id);
				const cellName = cell ? cell.row + cell.col : null;
				const { name } = await Instrument.findById(id);
				items.push({ cellName, name });
				if (cell) {
					await addToCell(cell._id, ItemType.INSTRUMENT, id, amount);
				}
			}
		}
		if (confirmation.furniture) {
			for (const [id, amount] of confirmation.furniture) {
				await addItem(ItemType.FURNITURE, id, amount);
				const cell = await getCell(ItemType.FURNITURE, id);
				const cellName = cell ? cell.row + cell.col : null;
				const { name } = await Furniture.findById(id);
				items.push({ cellName, name });
				if (cell) {
					await addToCell(cell._id, ItemType.FURNITURE, id, amount);
				}
			}
		}
		if (confirmation.consumables) {
			for (const [id, amount] of confirmation.consumables) {
				await addItem(ItemType.CONSUMABLE, id, amount);
				const cell = await getCell(ItemType.CONSUMABLE, id);
				const cellName = cell ? cell.row + cell.col : null;
				const { name } = await Consumable.findById(id);
				items.push({ cellName, name });
				if (cell) {
					await addToCell(cell._id, ItemType.CONSUMABLE, id, amount);
				}
			}
		}

		const text = '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:\n\n' + confirmation.text;
		await ctx.telegram.sendMessage(confirmation.chatId, text);

		/*
		 * –¢—É—Ç –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —è—á–µ–π–∫–∏
		 */

		const message = '–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º:\n' + (await Stockman.getCellsMessage(items));
		await ctx.reply(message);
	}

	/**
	 * Confirm return
	 * @desc
	 * –°–º—Å Worker —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å
	 * –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∞ —Ç–∞–∫–∂–µ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	 * –≤–æ–∑–≤—Ä–∞—Ç–∞
	 */
	public static confirmReturnInstrument(requestId: number): void {
		//...
	}

	public static confirmReturnFurniture(username: string, furniture: Map<number, number>): void {
		//...
	}

	/**
	 * Confirm removing
	 * @desc –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.
	 * –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è Admin –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
	 */
	public static confirmRemovingInstrument(username: string, instruments: Map<number, number>): void {
		//...
	}

	/*
	 * Confirm receipt
	 */
	public static confirmReceipt(items: Map<number, number>): void {
		//...
	}
}
