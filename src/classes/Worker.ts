import Person from './Person';
import ItemType from '../enums/ItemType';
import Confirmation from '../models/confirmation';
import { getChatId } from '../helpers/functions';
import { getStockmans } from '../helpers/persons';
import { getItem } from '../helpers/items';

const Markup = require('telegraf/markup');

type ItemRequested = { type: ItemType; id: string; amount: number };

export default class Worker extends Person {
	// Private
	private static async getGettingMessage(username: string, items: ItemRequested[]): Promise<string> {
		let message = `–†–∞–±–æ—Ç–Ω–∏–∫ @${username} —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n`;
		for (let item of items) {
			const { id, type, amount } = item;
			const { name } = await getItem(type, id);

			message += `üîπ ${name} -> ${amount} —à—Ç.\n`;
		}
		return message;
	}

	/*
	 * Request getting
	 */
	public static async requestGetting(ctx: any, chatId: number, username: string, items: ItemRequested[], days?: number): Promise<void> {
		if (!items.length) {
			return;
		}
		const stockmans = await getStockmans();
		if (!stockmans.length) {
			return;
		}
		const messageText = await Worker.getGettingMessage(username, items);
		const messages = [];

		const confirmation = new Confirmation();
		const confirmationId = confirmation._id;

		console.log('Confirmation ID:', confirmationId);

		for (let stockman of stockmans) {
			const id = await getChatId(stockman.username);
			if (!id) continue;

			const keyboard = Markup.inlineKeyboard([Markup.callbackButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `declineRequest>${confirmationId}`), Markup.callbackButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `approveRequest>${confirmationId}`)]).extra();

			const message = await ctx.telegram.sendMessage(id, messageText, keyboard);
			messages.push({
				id: message.message_id,
				chatId: id
			});
		}

		
		const instruments: Map<string, number> = new Map();
		const furniture: Map<string, number> = new Map();
		const consumables: Map<string, number> = new Map();

		items.forEach((item) => {
			switch (item.type) {
				case ItemType.INSTRUMENT: {
					instruments.set(item.id, item.amount);
					break;
				}
				case ItemType.FURNITURE: {
					furniture.set(item.id, item.amount);
					break;
				}
				case ItemType.CONSUMABLE: {
					consumables.set(item.id, item.amount);
					break;
				}
			}
		});

		if (instruments.size > 0) { confirmation.instruments = instruments; }
		if (furniture.size > 0) { confirmation.furniture = furniture; }
		if (consumables.size > 0) { confirmation.consumables = consumables; }
		if (days) { confirmation.days = days; }

		confirmation.messages = messages;
		confirmation.text = messageText;
		await confirmation.save();
	}

	// Public
	/*
	 * Confirm
	 */

	/**
	 * @param {string} gettingInfo - JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	 * –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ (—Ç–∏–ø –ø–æ–ª—É—á–µ–Ω–∏—è, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ–±—ä–µ–∫—Ç—ã
	 * –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è)
	 * @desc –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Request –≤ –ë–î
	 * —Å –µ–≥–æ requestId. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ gettingInfo
	 * –∑–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Request –≤ –ë–î
	 */
	public static confirmReceipt(gettingInfo: string): void {
		//...
	}

	/**
	 * @desc –ü–æ—Å–ª–µ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
	 * –≤ –ë–î –æ—Ç–º–µ—á–∞–µ–º Request –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±—ã–ª–∏
	 * –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã)
	 */
	public static confirmReturnInstrument(requestId: number): void {
		//...
	}

	/**
	 * @desc –ü–æ—Å–ª–µ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
	 * –µ—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞:
	 *	1.	–ú–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é Return, –≤ –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å
	 *		–≤–æ–∑–≤—Ä–∞—Ç—ã (–∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, —Ç–∞–∫ –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã)
	 *	2.	–ú–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π Request —Å —Ç–∏–ø–æ–º "–í–æ–∑–≤—Ä–∞—Ç", –∫—É–¥–∞
	 *		–Ω–∞–ø–∏—à–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –≤–æ–∑–≤—Ä–∞—Ç –∏–º–µ–Ω–Ω–æ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã (—Ç.–∫.
	 *		–ø—Ä–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–Ω—Ñ–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö Request
	 *		–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ)
	 */
	public static confirmReturnFurniture(requestId: number): void {
		//...
	}

	/*
	 * Request return
	 */

	/**
	 * @desc –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. –ê—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø–µ—Ä–µ–¥–∞–µ–º
	 * requestId –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å, –∫ –∫–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É
	 * –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ—Ç–º–µ—Ç–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
	 * –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã)
	 */
	public static requestReturnInstrument(requestId: number): void {
		//...
	}

	/**
	 * @desc –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã. –ü–æ—Å–∫–æ–ª—å–∫—É —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞
	 * –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞, —Ç–æ –∏ requestId –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è.
	 * –ü–µ—Ä–µ–¥–∞–µ–º –ª–∏—à—å —Å–∞–º—É —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
	 */
	public static requestReturnFurniture(furniture: Map<number, number>): void {
		//...
	}

	/*
	 * Request removing
	 */

	/**
	 * @desc –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. –ü–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø–µ—Ä–µ–¥–∞–µ–º
	 * requestId –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å, –∫ –∫–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É
	 * –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (—á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∏—Ö
	 * –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º). –í—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä—ã —Å
	 * –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
	 */
	public static requestRemovingInstrument(requestId: number, items: Map<number, number>): void {
		//...
	}
}
